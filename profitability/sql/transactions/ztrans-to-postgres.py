import sqlalchemy as sq
import os
import tqdm

CHUNK_SIZE = 50_000

# update this to point at an SQLite database with ZTrans data created by ztraxdb
# run prepare-ztrans.sql in that database before loading
sqlite = sq.create_engine("sqlite:///../../../data/ztrans_ca.db")
postgres = sq.create_engine(os.environ["SQMAKE_DB"])

with sqlite.connect() as src:
    with postgres.connect() as dest:
        with postgres.begin() as trans:
            # somehow this is deadlocking with SQMake itself
            trans.execute("""
            CREATE TABLE IF NOT EXISTS diss.ztrans (
	"TransId" BIGINT,
	"Main_FIPS" VARCHAR,
	"Main_State" VARCHAR,
	"Main_County" VARCHAR,
	"Main_DataClassStndCode" VARCHAR,
	"Main_RecordTypeStndCode" VARCHAR,
	"Main_RecordingDate" VARCHAR,
	"Main_ReRecordedCorrectionStndCode" VARCHAR,
	"Main_PriorRecordingDate" VARCHAR,
	"Main_PriorDocumentDate" VARCHAR,
	"Main_PriorDocumentNumber" VARCHAR,
	"Main_PriorBookNumber" VARCHAR,
	"Main_PriorPageNumber" VARCHAR,
	"Main_DocumentTypeStndCode" VARCHAR,
	"Main_DocumentDate" VARCHAR,
	"Main_SignatureDate" VARCHAR,
	"Main_EffectiveDate" VARCHAR,
	"Main_BuyerVestingStndCode" VARCHAR,
	"Main_BuyerMultiVestingFlag" VARCHAR,
	"Main_PartialInterestTransferStndCode" VARCHAR,
	"Main_PartialInterestTransferPercent" FLOAT,
	"Main_SalesPriceAmount" FLOAT,
	"Main_SalesPriceAmountStndCode" VARCHAR,
	"Main_CityTransferTax" FLOAT,
	"Main_CountyTransferTax" FLOAT,
	"Main_StateTransferTax" FLOAT,
	"Main_TotalTransferTax" FLOAT,
	"Main_IntraFamilyTransferFlag" VARCHAR,
	"Main_TransferTaxExemptFlag" VARCHAR,
	"Main_PropertyUseStndCode" VARCHAR,
	"Main_AssessmentLandUseStndCode" VARCHAR,
	"Main_OccupancyStatusStndCode" VARCHAR,
	"Main_LegalStndCode" VARCHAR,
	"Main_BorrowerVestingStndCode" VARCHAR,
	"Main_LoanAmount" FLOAT,
	"Main_LoanAmountStndCode" VARCHAR,
	"Main_MaximumLoanAmount" FLOAT,
	"Main_CondominiumRiderFlag" VARCHAR,
	"Main_PlannedUnitDevelopmentRiderFlag" VARCHAR,
	"Main_SecondHomeRiderFlag" VARCHAR,
	"Main_OneToFourFamilyRiderFlag" VARCHAR,
	"Main_ConcurrentMtgeDocOrBkPg" VARCHAR,
	"Main_LoanNumber" VARCHAR,
	"Main_MERSMINNumber" VARCHAR,
	"Main_CaseNumber" VARCHAR,
	"Main_MERSFlag" VARCHAR,
	"Main_AccommodationRecordingFlag" VARCHAR,
	"Main_TrusteeSaleNumber" VARCHAR,
	"Main_AttorneyFileNumber" VARCHAR,
	"Main_AuctionDate" VARCHAR,
	"Main_AuctionTime" VARCHAR,
	"Main_AuctionFullStreetAddress" VARCHAR,
	"Main_AuctionCityName" VARCHAR,
	"Main_StartingBid" FLOAT,
	"Main_KeyedDate" VARCHAR,
	"Main_KeyerID" VARCHAR,
	"Main_SubVendorStndCode" VARCHAR,
	"Main_ImageFileName" VARCHAR,
	"Main_BuilderFlag" VARCHAR,
	"Main_MatchStndCode" VARCHAR,
	"Main_REOStndCode" VARCHAR,
	"Main_UpdateOwnershipFlag" VARCHAR,
	"Main_LoadID" BIGINT,
	"Main_StatusInd" INTEGER,
	"Main_TransactionTypeStndCode" VARCHAR,
	"Main_BatchID" INTEGER,
	"Main_BKFSPID" INTEGER,
	"Main_ZVendorStndCode" VARCHAR,
	"Main_SourceChkSum" INTEGER,
    	"PropertyInfo_AssessorParcelNumber" VARCHAR,
	"PropertyInfo_APNIndicatorStndCode" VARCHAR,
	"PropertyInfo_TaxIDNumber" VARCHAR,
	"PropertyInfo_TaxIDIndicatorStndCode" VARCHAR,
	"PropertyInfo_UnformattedAssessorParcelNumber" VARCHAR,
	"PropertyInfo_AlternateParcelNumber" VARCHAR,
	"PropertyInfo_LegalLot" VARCHAR,
	"PropertyInfo_LegalOtherLot" VARCHAR,
	"PropertyInfo_LegalLotCode" VARCHAR,
	"PropertyInfo_LegalBlock" VARCHAR,
	"PropertyInfo_LegalSubdivisionName" VARCHAR,
	"PropertyInfo_LegalCondoProjectPUDDevName" VARCHAR,
	"PropertyInfo_LegalBuildingNumber" VARCHAR,
	"PropertyInfo_LegalUnit" VARCHAR,
	"PropertyInfo_LegalSection" VARCHAR,
	"PropertyInfo_LegalPhase" VARCHAR,
	"PropertyInfo_LegalTract" VARCHAR,
	"PropertyInfo_LegalDistrict" VARCHAR,
	"PropertyInfo_LegalMunicipality" VARCHAR,
	"PropertyInfo_LegalCity" VARCHAR,
	"PropertyInfo_LegalTownship" VARCHAR,
	"PropertyInfo_LegalSTRSection" VARCHAR,
	"PropertyInfo_LegalSTRTownship" VARCHAR,
	"PropertyInfo_LegalSTRRange" VARCHAR,
	"PropertyInfo_LegalSTRMeridian" VARCHAR,
	"PropertyInfo_LegalSecTwnRngMer" VARCHAR,
	"PropertyInfo_LegalRecordersMapReference" VARCHAR,
	"PropertyInfo_LegalDescription" VARCHAR,
	"PropertyInfo_LegalLotSize" VARCHAR,
	"PropertyInfo_PropertySequenceNumber" INTEGER,
	"PropertyInfo_FIPS" VARCHAR,
	"PropertyInfo_LoadID" BIGINT,
	"PropertyInfo_ImportParcelID" BIGINT,
	"PropertyInfo_BKFSPID" INTEGER,
	"PropertyInfo_AssessmentRecordMatchFlag" INTEGER,
	"PropertyInfo_BatchID" INTEGER
);
            """)
            print('created table')
            sel = src.execute("""
                SELECT	z."TransId",
	"Main_FIPS",
	"Main_State",
	"Main_County",
	"Main_DataClassStndCode",
	"Main_RecordTypeStndCode",
	"Main_RecordingDate",
	"Main_ReRecordedCorrectionStndCode",
	"Main_PriorRecordingDate",
	"Main_PriorDocumentDate",
	"Main_PriorDocumentNumber",
	"Main_PriorBookNumber",
	"Main_PriorPageNumber",
	"Main_DocumentTypeStndCode",
	"Main_DocumentDate",
	"Main_SignatureDate",
	"Main_EffectiveDate",
	"Main_BuyerVestingStndCode",
	"Main_BuyerMultiVestingFlag",
	"Main_PartialInterestTransferStndCode",
	"Main_PartialInterestTransferPercent",
	"Main_SalesPriceAmount",
	"Main_SalesPriceAmountStndCode",
	"Main_CityTransferTax",
	"Main_CountyTransferTax",
	"Main_StateTransferTax",
	"Main_TotalTransferTax",
	"Main_IntraFamilyTransferFlag",
	"Main_TransferTaxExemptFlag",
	"Main_PropertyUseStndCode",
	"Main_AssessmentLandUseStndCode",
	"Main_OccupancyStatusStndCode",
	"Main_LegalStndCode",
	"Main_BorrowerVestingStndCode",
	"Main_LoanAmount",
	"Main_LoanAmountStndCode",
	"Main_MaximumLoanAmount",
	"Main_CondominiumRiderFlag",
	"Main_PlannedUnitDevelopmentRiderFlag",
	"Main_SecondHomeRiderFlag",
	"Main_OneToFourFamilyRiderFlag",
	"Main_ConcurrentMtgeDocOrBkPg",
	"Main_LoanNumber",
	"Main_MERSMINNumber",
	"Main_CaseNumber",
	"Main_MERSFlag",
	"Main_AccommodationRecordingFlag",
	"Main_TrusteeSaleNumber",
	"Main_AttorneyFileNumber",
	"Main_AuctionDate",
	"Main_AuctionTime",
	"Main_AuctionFullStreetAddress",
	"Main_AuctionCityName",
	"Main_StartingBid",
	"Main_KeyedDate",
	"Main_KeyerID",
	"Main_SubVendorStndCode",
	"Main_ImageFileName",
	"Main_BuilderFlag",
	"Main_MatchStndCode",
	"Main_REOStndCode",
	"Main_UpdateOwnershipFlag",
	"Main_LoadID",
	"Main_StatusInd",
	"Main_TransactionTypeStndCode",
	"Main_BatchID",
	"Main_BKFSPID",
	"Main_ZVendorStndCode",
	"Main_SourceChkSum",
    	"PropertyInfo_AssessorParcelNumber",
	"PropertyInfo_APNIndicatorStndCode",
	"PropertyInfo_TaxIDNumber",
	"PropertyInfo_TaxIDIndicatorStndCode",
	"PropertyInfo_UnformattedAssessorParcelNumber",
	"PropertyInfo_AlternateParcelNumber",
	"PropertyInfo_LegalLot",
	"PropertyInfo_LegalOtherLot",
	"PropertyInfo_LegalLotCode",
	"PropertyInfo_LegalBlock",
	"PropertyInfo_LegalSubdivisionName",
	"PropertyInfo_LegalCondoProjectPUDDevName",
	"PropertyInfo_LegalBuildingNumber",
	"PropertyInfo_LegalUnit",
	"PropertyInfo_LegalSection",
	"PropertyInfo_LegalPhase",
	"PropertyInfo_LegalTract",
	"PropertyInfo_LegalDistrict",
	"PropertyInfo_LegalMunicipality",
	"PropertyInfo_LegalCity",
	"PropertyInfo_LegalTownship",
	"PropertyInfo_LegalSTRSection",
	"PropertyInfo_LegalSTRTownship",
	"PropertyInfo_LegalSTRRange",
	"PropertyInfo_LegalSTRMeridian",
	"PropertyInfo_LegalSecTwnRngMer",
	"PropertyInfo_LegalRecordersMapReference",
	"PropertyInfo_LegalDescription",
	"PropertyInfo_LegalLotSize",
	"PropertyInfo_PropertySequenceNumber",
	"PropertyInfo_FIPS",
	"PropertyInfo_LoadID",
	"PropertyInfo_ImportParcelID",
	"PropertyInfo_BKFSPID",
	"PropertyInfo_AssessmentRecordMatchFlag",
	"PropertyInfo_BatchID" INTEGER
    FROM ztrans z CROSS JOIN  -- the "CROSS JOIN" with the WHERE condition below is to force the query to look at the ztrans table with county index *first*, rather than for the optimizer to inexplicably try to utilize the n_properties_transacted index
        ZTrans_PropertyInfo pi
    WHERE z."TransId" = pi."TransId"
    AND Main_County in ('LOS ANGELES', 'RIVERSIDE', 'SAN BERNARDINO', 'IMPERIAL', 'VENTURA', 'ORANGE')
    AND n_properties_transacted = 1; -- only single-property transactions, NB that you need to run prepare-ztrans to create and populate this column
            """)
            print('ran select')

            meta = sq.MetaData(trans)

            with tqdm.tqdm() as pbar:
                while (rows := sel.fetchmany(CHUNK_SIZE)):
                    trans.execute(sq.insert(sq.Table('ztrans', meta, autoload=True, schema='diss')), rows)
                    pbar.update(CHUNK_SIZE)
				trans.execute('CREATE INDEX zasmt_importparcelid_ix ON diss.zasmt ("Main_ImportParcelID");')
				trans.execute('CREATE INDEX ztrans_importparcelid_ix ON diss.ztrans ("PropertyInfo_ImportParcelID");')
